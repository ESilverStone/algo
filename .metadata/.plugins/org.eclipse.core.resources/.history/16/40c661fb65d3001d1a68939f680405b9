
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.StringTokenizer;

import 다잌.Node;




public class p1753_최단경로 {
	
	static class Node {
		int v, w;
		public Node(int v, int w) {
			this.v = v;
			this.w = w;
		}
	}
	
	static final int INF = Integer.MAX_VALUE;
	static int v, e; //V : 정점 , E: 간선
	static List<Node>[] adjList; //인접리스트
	static int[] dist; //최단 길이를 저장할 배열
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		
		// 노드와 간선
		st = new StringTokenizer(br.readLine());
		v = Integer.parseInt(st.nextToken());
		e = Integer.parseInt(st.nextToken());
		
		// 시작점
		st = new StringTokenizer(br.readLine());
		int start = Integer.parseInt(st.nextToken());
		
		
		adjList = new ArrayList[V];
		for(int i = 0 ; i<V; i++)
			adjList[i] = new ArrayList<>();
		
		dist = new int[V];
		Arrays.fill(dist, INF);
		
		// 간선 입력
		for(int i=0; i<e; i++) {
			st = new StringTokenizer(br.readLine());
			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());
			int w = Integer.parseInt(st.nextToken());
			
			adjList[a].add(new Node(b, w));
		}
		
		dijkstra(start);
			
	}
	
	public static void dijkstra(int start) {
		boolean[] visit = new boolean[v];
	}
	
	
	
}


















