
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.StringTokenizer;

public class p1753_최단경로 {
	
	static class Node {
		int v, w;
		public Node(int v, int w) {
			this.v = v;
			this.w = w;
		}
	}
	
	static final int INF = Integer.MAX_VALUE;
	static int v, e; //V : 정점 , E: 간선
	static List<Node>[] adjList; //인접리스트
	static int[] dist; //최단 길이를 저장할 배열
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		
		// 노드와 간선
		st = new StringTokenizer(br.readLine());
		v = Integer.parseInt(st.nextToken());
		e = Integer.parseInt(st.nextToken());
		
		// 시작점
		st = new StringTokenizer(br.readLine());
		int start = Integer.parseInt(st.nextToken());
		
		
		adjList = new ArrayList[v+1];
		for(int i = 0 ; i<v+1; i++)
			adjList[i] = new ArrayList<>();
		
		dist = new int[v+1];
		Arrays.fill(dist, INF);
		
		// 간선 입력
		for(int i=0; i<e; i++) {
			st = new StringTokenizer(br.readLine());
			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());
			int w = Integer.parseInt(st.nextToken());
			
			adjList[a].add(new Node(b, w));
		}
		
		dijkstra(start);
			
		for(int i=1; i<=v; i++) {
			System.out.println(dist[i]);
		}
	}
	
	public static void dijkstra(int start) {
		boolean[] visit = new boolean[v];
		
		dist[start] = 0;
		
		for(int i=0; i<v-1; i++) {
			int min = INF;
			int idx = -1;
			
			
			for(int j=0; j<v; j++) {
				if(!visit[j] && min > dist[j]) {
					min = dist[j];
					idx = j;
				}
			}
			
			if(idx == -1) break;
			
			visit[idx] = true;
			
			for(int j = 0 ; j< adjList[idx].size(); j++) {
				Node curr = adjList[idx].get(j);
				
				//방문하지 않았고, 연결도되었고(인접행렬일때나 해당됨),
				//이미 가지고 있는 값보다 더 굉장한 값이 이싿면 갱신
				if(!visit[curr.v] && dist[curr.v]> dist[idx] + curr.w )
					dist[curr.v]= dist[idx] + curr.w; 
			}
		}
		
	}
	
	
	
}


















