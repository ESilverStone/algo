import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Queue;
import java.util.Scanner;

class Point {
	
	int val;
	int time;
	
	public Point(int val, int time) {
		this.val = val;
		this.time = time;
	}
}

public class p12851_숨바꼭질2 {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		int N = sc.nextInt();
		int K = sc.nextInt();
		
		int resultT = Integer.MAX_VALUE;
		boolean lock = false;
		int cnt = 0;
		
		int[] visit = new int[2000001];
				
		// BFS 탐색
		Queue<Point> que = new LinkedList<Point>();
		
		
		que.add(new Point(N, 0));
		visit[N] = 1;
		
		while(!que.isEmpty()) {
			
			Point pos = que.poll();
			
			int curV = pos.val;
			int curT = pos.time;
			
//			System.out.print("curV : "+curV);
//			System.out.println("curT : "+curT);
			
			// 정답 조건
			if(curV == K) {
				
				if(curT > resultT) continue;
				
				resultT = curT;
				lock = true;
				cnt++;
			} 
			
			// 탈출 조건
			if(lock) continue;
			
			
			// +1
			if(curV+1 > 0 && curV+1 <200000) {
				
				// 방문했으면 값을 늘리기만 하고 que에 넣지 않는다.
				if(visit[curV+1] != 0) visit[curV+1]++;
				
				else que.add(new Point(curV+1, curT+1));			
			}
			
			// -1
			if(curV-1 > 0 && curV-1 <200000) {
				
				if(visit[curV-1] != 0) visit[curV-1]++;
				
				else que.add(new Point(curV-1, curT+1));			
			}
			
			// *2
			if(curV*2 > 0 && curV*2 <200000) {
				
				if(visit[curV*2] != 0) visit[curV*2]++;
				
				else que.add(new Point(curV*2, curT+1));	
			}
		}
		// while 끝
		System.out.println(resultT);
		System.out.println(cnt);	
	}
}
