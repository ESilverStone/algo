import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class p17070_파이프옮기기1 {
	
	public static int[][] map;
	public static int N;
	public static int cnt;
	
	// 가로 0 세로 1 대각선 2
	static int[] vi = {0,1,1};
	static int[] vj = {1,0,1};
	
	static boolean[] root;	// 가능한 루트는 true로 바꿀거임
	
	static void dfs(int startI, int startJ, int dirc) {
		
		// 탈출 조건
		if(startI == N && startJ == N) {
			cnt++;
			return;
		}
		
		
		rootSelector(startI, startJ, dirc);
		checkWall(startI, startJ, dirc);
		
		
		for(int i=0; i<3; i++) {
			
			// 못가는 루트면 나가리
			if(!root[i]) continue;
			
			// 갈 수 있다면 밀어
			int curI = startI + vi[i];
			int curJ = startJ + vj[i];
			
			// 만약 벽을 뚫어버린다면 나가리
			if(curI >= N+1 || curJ >= N+1) continue;
			
			
			
			dfs(curI, curJ, i);
			
			
			
		}
		return;
		
	}
	
	static void checkWall(int startI, int startJ, int dirc) {
		for(int i=0; i<3; i++) {
			int curI = startI + vi[i];
			int curJ = startJ + vj[i];
			
			if(curI >= N+1 || curJ >= N+1) continue;
			if(map[curI][curJ] == 0) continue;
			
			// 가로에 벽이 있으면
			if(i==0) 		{root[0] = false; root[2] = false;}
			else if(i==1) 	{root[1] = false; root[2] = false;}
			else 			{root[2] = false;}
		}
	}

	// 갈 수 있는 루트를 설정해준다.
	static void rootSelector(int startI, int startJ, int dirc) {
		
		switch(dirc) {
		case 0:
			root[0] = true;
			root[1] = false;
			root[2] = true;
			break;
			
		case 1:
			root[0] = false;
			root[1] = true;
			root[2] = true;
			break;
			
		case 2:
			root[0] = true;
			root[1] = true;
			root[2] = true;
			break;
		}
	}


	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		
		N = Integer.parseInt(br.readLine());
		map = new int[N+1][N+1];
		
		for(int i=1; i<=N; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j=1; j<=N; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		
		cnt = 0;
		root = new boolean[3];
		
		// 시작지점에서의 파이프의 끝 지점 + 처음 방향 가로(0)
		dfs(1,2,0);
		
		System.out.println(cnt);
		
		
	}
}
